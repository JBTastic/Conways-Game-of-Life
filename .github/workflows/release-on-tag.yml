name: Build and Release on Tag

on:
    push:
        tags:
            - "v*.*.*"

jobs:
    build:
        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                include:
                    - os: ubuntu-latest
                      arch: amd64
                      ext: ""
                    - os: macos-latest
                      arch: amd64
                      ext: ""
                    - os: macos-latest
                      arch: arm64
                      ext: ""
                    - os: windows-latest
                      arch: amd64
                      ext: ".exe"

        steps:
            - uses: actions/checkout@v4

            # Linux: apt
            - name: Install SDL2 on Linux
              if: startsWith(matrix.os, 'ubuntu')
              run: |
                  sudo apt-get update
                  sudo apt-get install -y libsdl2-dev libsdl2-ttf-dev libsdl2-image-dev pkg-config

            # macOS: brew
            - name: Install SDL2 on macOS
              if: startsWith(matrix.os, 'macos')
              run: |
                  brew install sdl2 sdl2_ttf sdl2_image pkg-config

            # Windows: MSYS2 mit MinGW
            - name: Install MSYS2 and SDL2 on Windows
              if: startsWith(matrix.os, 'windows')
              uses: msys2/setup-msys2@v2
              with:
                  update: true
                  install: |
                      mingw-w64-x86_64-toolchain
                      mingw-w64-x86_64-SDL2
                      mingw-w64-x86_64-SDL2_ttf
                      mingw-w64-x86_64-SDL2_image
                  msystem: MINGW64

            - name: Build binary on Windows
              if: startsWith(matrix.os, 'windows')
              shell: msys2 {0}
              run: |
                  # Verwende pkg-config für die korrekten Compiler-Flags
                  g++ -std=c++17 *.cpp -o conways-game-of-life.exe \
                    $(pkg-config --cflags --libs sdl2 SDL2_ttf SDL2_image) \
                    -lSDL2main -mwindows

            - name: Copy SDL2 DLLs for analysis
              if: startsWith(matrix.os, 'windows')
              shell: msys2 {0}
              run: |
                  cp /mingw64/bin/SDL2.dll .
                  cp /mingw64/bin/SDL2_image.dll .
                  cp /mingw64/bin/SDL2_ttf.dll .

            - name: Find and copy all required DLLs
              if: startsWith(matrix.os, 'windows')
              shell: msys2 {0}
              run: |
                  # Funktion zum Kopieren von DLLs, wenn sie existieren
                  copy_dll_if_exists() {
                      if [ -f "/mingw64/bin/$1" ]; then
                          cp "/mingw64/bin/$1" .
                          echo "Copied $1"
                      else
                          echo "Skipping $1 (not found)"
                      fi
                  }

                  # Liste aller potenziell benötigter DLLs
                  all_dlls=(
                    # SDL2 Haupt-DLLs
                    "SDL2.dll" "SDL2_image.dll" "SDL2_ttf.dll"
                    
                    # Bildformat-DLLs
                    "libavif-16.dll" "libjpeg-8.dll" "libjxl.dll" "libpng16-16.dll"
                    "libwebp-7.dll" "libwebpdemux-2.dll" "libwebpmux-3.dll" "zlib1.dll"
                    
                    # Compiler und System-DLLs
                    "libwinpthread-1.dll" "libgcc_s_seh-1.dll" "libstdc++-6.dll"
                    
                    # Schriftarten-DLLs
                    "libharfbuzz-0.dll" "libfreetype-6.dll"
                    
                    # Video- und Bild-DLLs
                    "libaom.dll" "libtiff-6.dll" "libdav1d-7.dll" "librav1e.dll"
                    "libSvtAv1Enc-3.dll" "libyuv.dll"
                    
                    # Weitere mögliche Abhängigkeiten
                    "libbrotlicommon.dll" "libbrotlidec.dll" "libbrotlienc.dll"
                    "libdeflate.dll" "libexpat.dll" "libglib-2.0-0.dll" "libgraphite2.dll"
                    "libintl-8.dll" "libjbig-0.dll" "libLerc.dll" "liblzma.dll"
                    "libpcre2-8-0.dll" "libsharpyuv-0.dll" "libzstd.dll"
                    
                    # Weitere mögliche Codec-DLLs
                    "libbluray-2.dll" "libcaca-0.dll" "libcdio-19.dll" "libcdio_cdio-1.dll"
                    "libcdio_paranoia-1.dll" "libdvdnav-4.dll" "libdvdread-8.dll" "libmp3lame-0.dll"
                    "libogg-0.dll" "libopenjp2-7.dll" "libopus-0.dll" "libsamplerate-0.dll"
                    "libspeex-1.dll" "libtheora-0.dll" "libtheoradec-1.dll" "libtheoraenc-1.dll"
                    "libvorbis-0.dll" "libvorbisenc-2.dll" "libvorbisfile-3.dll" "libvpx-1.dll"
                    "libwavpack-1.dll" "libx264-164.dll" "libx265-199.dll" "libxml2-2.dll"
                  )

                  for dll in "${all_dlls[@]}"; do
                      copy_dll_if_exists "$dll"
                  done

                  # Zusätzlich: Finde alle Abhängigkeiten unserer EXE-Datei
                  echo "Analyzing dependencies of conways-game-of-life.exe..."
                  ldd conways-game-of-life.exe | grep -o '/mingw64/bin/.*dll' | while read -r dll; do
                      dll_name=$(basename "$dll")
                      if [ -f "$dll" ]; then
                          cp "$dll" .
                          echo "Copied dependency: $dll_name"
                      fi
                  done

            - name: Build binary on Unix
              if: matrix.os != 'windows-latest'
              shell: bash
              run: |
                  BIN_NAME="conways-game-of-life${{ matrix.ext }}"
                  if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
                    g++ -std=c++17 *.cpp -o "$BIN_NAME" $(pkg-config --cflags --libs sdl2 SDL2_ttf SDL2_image)
                  elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
                    clang++ -std=c++17 *.cpp -o "$BIN_NAME" $(pkg-config --cflags --libs sdl2 SDL2_ttf SDL2_image)
                  fi

            - name: Archive binary
              shell: bash
              run: |
                  ARCHIVE_NAME="conways-game-of-life-${{ matrix.os }}-${{ matrix.arch }}"
                  if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
                    # Füge alle DLLs und die sans.ttf zum ZIP-Archiv hinzu
                    7z a "${ARCHIVE_NAME}.zip" conways-game-of-life.exe *.dll sans.ttf
                  else
                    BIN_NAME="conways-game-of-life${{ matrix.ext }}"
                    # Füge sans.ttf zum TAR-Archiv hinzu
                    tar -czf "${ARCHIVE_NAME}.tar.gz" "$BIN_NAME" sans.ttf
                  fi

            - uses: actions/upload-artifact@v4
              with:
                  name: conways-game-of-life-${{ matrix.os }}-${{ matrix.arch }}
                  path: |
                      *.tar.gz
                      *.zip

    release:
        needs: build
        runs-on: ubuntu-latest
        permissions:
            contents: write
        steps:
            - name: Download all artifacts
              uses: actions/download-artifact@v4
              with:
                  path: ./artifacts

            - name: List files in artifacts directory
              run: ls -R ./artifacts

            - name: Create Release
              uses: softprops/action-gh-release@v1
              with:
                  files: ./artifacts/**/*
